import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Loader2, Brain, Lightbulb, BookOpen } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface AIResponse {
  answer: string;
  confidence: number;
  relatedTopics: string[];
  sources: string[];
}

export const AIStudyAssistant = () => {
  const [question, setQuestion] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [aiResponse, setAiResponse] = useState<AIResponse | null>(null);
  const { toast } = useToast();

  const handleAskAI = async () => {
  if (!question.trim()) {
    toast({
      title: "Please enter a question",
      description: "Type your question in the text area above.",
      variant: "destructive",
    });
    return;
  }

  setIsLoading(true);

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${import.meta.env.VITE_OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model:"gpt-3.5-turbo",

        messages: [{ role: "user", content: question }],
        temperature: 0.7,
      }),
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.error?.message || "OpenAI request failed");
    }

    const aiText = data.choices[0].message.content;

    setAiResponse({
      answer: aiText,
      confidence: 0.9,
      relatedTopics: ["Generated by AI"],
      sources: ["OpenAI GPT model"],
    });

    toast({
      title: "AI Response Ready",
      description: "Answer successfully generated.",
    });
  } catch (error: any) {
    toast({
      title: "Error",
      description: error.message || "Failed to fetch AI response.",
      variant: "destructive",
    });
  } finally {
    setIsLoading(false);
  }
};


  const handleClearChat = () => {
    setQuestion("");
    setAiResponse(null);
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="h-5 w-5 text-primary" />
            AI Study Assistant
          </CardTitle>
          <CardDescription>
            Get instant, intelligent answers to your study questions powered by AI
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <label htmlFor="ai-question" className="text-sm font-medium">
              Ask your question:
            </label>
            <Textarea
              id="ai-question"
              placeholder="Type your study question here... (e.g., 'Explain the concept of photosynthesis' or 'How do I solve quadratic equations?')"
              value={question}
              onChange={(e) => setQuestion(e.target.value)}
              className="min-h-[100px]"
            />
          </div>
          
          <div className="flex gap-2">
            <Button 
              onClick={handleAskAI} 
              disabled={isLoading || !question.trim()}
              className="flex-1"
            >
              {isLoading ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Analyzing...
                </>
              ) : (
                <>
                  <Brain className="h-4 w-4 mr-2" />
                  Ask AI
                </>
              )}
            </Button>
            
            {aiResponse && (
              <Button variant="outline" onClick={handleClearChat}>
                Clear Chat
              </Button>
            )}
          </div>
        </CardContent>
      </Card>

      {aiResponse && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Lightbulb className="h-5 w-5 text-primary" />
              AI Response
              <Badge variant="secondary" className="ml-auto">
                {Math.round(aiResponse.confidence * 100)}% Confidence
              </Badge>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="prose prose-sm max-w-none">
              <p className="whitespace-pre-line text-sm leading-relaxed">
                {aiResponse.answer}
              </p>
            </div>
            
            {aiResponse.relatedTopics.length > 0 && (
              <div>
                <h4 className="text-sm font-medium mb-2 flex items-center gap-1">
                  <BookOpen className="h-4 w-4" />
                  Related Topics:
                </h4>
                <div className="flex flex-wrap gap-2">
                  {aiResponse.relatedTopics.map((topic, index) => (
                    <Badge key={index} variant="outline" className="text-xs">
                      {topic}
                    </Badge>
                  ))}
                </div>
              </div>
            )}
            
            {aiResponse.sources.length > 0 && (
              <div>
                <h4 className="text-sm font-medium mb-2">Sources:</h4>
                <div className="flex flex-wrap gap-2">
                  {aiResponse.sources.map((source, index) => (
                    <Badge key={index} variant="secondary" className="text-xs">
                      {source}
                    </Badge>
                  ))}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  );
};